// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    email, password_hash, first_name, last_name, timezone, preferences
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, email, password_hash, first_name, last_name, timezone, preferences, last_login_at, created_at, updated_at
`

type CreateUserParams struct {
	Email        string      `db:"email" json:"email"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	FirstName    string      `db:"first_name" json:"first_name"`
	LastName     string      `db:"last_name" json:"last_name"`
	Timezone     pgtype.Text `db:"timezone" json:"timezone"`
	Preferences  []byte      `db:"preferences" json:"preferences"`
}

// EngLog User Management Queries
// User authentication and profile management
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Timezone,
		arg.Preferences,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Timezone,
		&i.Preferences,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getRecentUsers = `-- name: GetRecentUsers :many
SELECT id, email, first_name, last_name, created_at
FROM users
ORDER BY created_at DESC
LIMIT $1
`

type GetRecentUsersRow struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	Email     string             `db:"email" json:"email"`
	FirstName string             `db:"first_name" json:"first_name"`
	LastName  string             `db:"last_name" json:"last_name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) GetRecentUsers(ctx context.Context, limit int32) ([]GetRecentUsersRow, error) {
	rows, err := q.db.Query(ctx, getRecentUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentUsersRow{}
	for rows.Next() {
		var i GetRecentUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, first_name, last_name, timezone, preferences, last_login_at, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Timezone,
		&i.Preferences,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, first_name, last_name, timezone, preferences, last_login_at, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Timezone,
		&i.Preferences,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one
SELECT COUNT(*) FROM users
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET first_name = $2, last_name = $3, timezone = $4,
    preferences = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, email, password_hash, first_name, last_name, timezone, preferences, last_login_at, created_at, updated_at
`

type UpdateUserProfileParams struct {
	ID          uuid.UUID   `db:"id" json:"id"`
	FirstName   string      `db:"first_name" json:"first_name"`
	LastName    string      `db:"last_name" json:"last_name"`
	Timezone    pgtype.Text `db:"timezone" json:"timezone"`
	Preferences []byte      `db:"preferences" json:"preferences"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Timezone,
		arg.Preferences,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Timezone,
		&i.Preferences,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

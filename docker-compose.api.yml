services:
  # Caddy Reverse Proxy with Automatic TLS
  caddy:
    image: caddy:2-alpine
    container_name: englog_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3
    volumes:
      - ./deployments/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
    networks:
      - public
    depends_on:
      - api-server
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server (Main Application)
  api-server:
    build:
      context: .
      dockerfile: deployments/api/Dockerfile
    container_name: englog_api_server
    restart: unless-stopped
    expose:
      - "8080"  # HTTP API (internal only)
      - "9090"  # gRPC Server (internal only)
    env_file:
      - .env.api-dev
    volumes:
      - ./logs/api:/app/logs
    networks:
      - public
      - private
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: englog_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=englog
      - POSTGRES_USER=englog
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - private
    ports:
      - "5432:5432"  # Expose for development (remove in production)
    depends_on:
      - api-server
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U englog -d englog"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: englog_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - private
    ports:
      - "6379:6379"  # Expose for development (remove in production)
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # # Prometheus Monitoring (Optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: englog_prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9093:9090"
  #   volumes:
  #     - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - public
  #     - private
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'

  # # Grafana Dashboard (Optional)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: englog_grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./deployments/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
  #     - ./deployments/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
  #   networks:
  #     - public
  #     - private

networks:
  public:
    driver: bridge
  private:
    driver: bridge
    internal: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

meta {
  name: Request Team Collaboration Insight
  type: http
  seq: 4
}

post {
  url: {{base_url}}/v1/tasks/insights
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{access_token}}
}

body:json {
  {
    "user_id": "{{user_id}}",
    "entry_ids": [
      "550e8400-e29b-41d4-a716-446655440001",
      "550e8400-e29b-41d4-a716-446655440002",
      "550e8400-e29b-41d4-a716-446655440003"
    ],
    "insight_type": "team_collaboration",
    "context": {
      "team_size": 6,
      "role": "senior_developer",
      "collaboration_types": [
        "code_reviews",
        "pair_programming",
        "technical_discussions",
        "mentoring",
        "cross_team_coordination"
      ],
      "communication_channels": {
        "slack_messages_per_day": 45,
        "meetings_per_week": 8,
        "code_review_participation": "high"
      },
      "team_dynamics": {
        "team_tenure": "6_months",
        "experience_levels": ["junior", "mid", "senior", "lead"],
        "current_projects": 3
      },
      "improvement_areas": [
        "Reduce meeting overhead",
        "Improve asynchronous communication",
        "Enhance knowledge sharing"
      ],
      "analysis_focus": "Team collaboration effectiveness and communication patterns analysis for Q3 2025"
    }
  }
}

tests {
  test("Status should be 202 (Accepted)", function() {
    expect(res.getStatus()).to.equal(202);
  });

  test("Should return task_id and message", function() {
    expect(res.getBody()).to.have.property('task_id');
    expect(res.getBody()).to.have.property('message');
  });

  test("Task ID should be a string", function() {
    expect(res.getBody().task_id).to.be.a('string');
  });

  test("Message should confirm task queued", function() {
    expect(res.getBody().message).to.include('queued successfully');
  });
}

script:post-response {
  if (res.getStatus() === 202) {
    bru.setVar("collaboration_task_id", res.getBody().task_id);
  }
}

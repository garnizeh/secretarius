meta {
  name: Request Time Management Insight
  type: http
  seq: 3
}

post {
  url: {{base_url}}/v1/tasks/insights
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{access_token}}
}

body:json {
  {
    "user_id": "{{user_id}}",
    "entry_ids": [
      "550e8400-e29b-41d4-a716-446655440001",
      "550e8400-e29b-41d4-a716-446655440002",
      "550e8400-e29b-41d4-a716-446655440003",
      "550e8400-e29b-41d4-a716-446655440004",
      "550e8400-e29b-41d4-a716-446655440005"
    ],
    "insight_type": "time_management",
    "context": {
      "date_range": {
        "start": "2025-07-01",
        "end": "2025-07-31"
      },
      "time_allocation_goals": {
        "development": 60,
        "meetings": 25,
        "documentation": 10,
        "learning": 5
      },
      "current_challenges": [
        "Too many interruptions during coding sessions",
        "Meetings running over scheduled time",
        "Context switching between projects"
      ],
      "work_schedule": {
        "preferred_deep_work_hours": ["09:00-12:00", "14:00-17:00"],
        "meeting_windows": ["10:00-11:00", "15:00-16:00"],
        "break_intervals": 90
      },
      "productivity_patterns": {
        "peak_hours": ["morning", "early_afternoon"],
        "low_energy_periods": ["post_lunch", "late_evening"]
      }
    }
  }
}

tests {
  test("Status should be 202 (Accepted)", function() {
    expect(res.getStatus()).to.equal(202);
  });

  test("Should return task_id and message", function() {
    expect(res.getBody()).to.have.property('task_id');
    expect(res.getBody()).to.have.property('message');
  });

  test("Task ID should be a string", function() {
    expect(res.getBody().task_id).to.be.a('string');
  });

  test("Message should confirm task queued", function() {
    expect(res.getBody().message).to.include('queued successfully');
  });
}

script:post-response {
  if (res.getStatus() === 202) {
    bru.setVar("time_management_task_id", res.getBody().task_id);
  }
}

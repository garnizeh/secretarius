meta {
  name: Get Task Result
  type: http
  seq: 3
}

get {
  url: {{base_url}}/v1/tasks/{{task_id}}/result
  body: none
  auth: inherit
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{access_token}}
}

tests {
  test("Status should be 200 or 404", function() {
    expect([200, 404]).to.include(res.getStatus());
  });

  if (res.getStatus() === 200) {
    test("Should return task result", function() {
      expect(res.getBody()).to.have.property('task_id');
      expect(res.getBody()).to.have.property('status');
      expect(res.getBody()).to.have.property('started_at');
    });

    test("Task ID should match request", function() {
      expect(res.getBody().task_id).to.equal(bru.getVar("task_id"));
    });

    test("Status should be valid", function() {
      const validStatuses = ['pending', 'running', 'completed', 'failed'];
      expect(validStatuses).to.include(res.getBody().status);
    });
  }

  if (res.getStatus() === 404) {
    test("Should return error message", function() {
      expect(res.getBody()).to.have.property('error');
      expect(res.getBody().error).to.include('Task not found');
    });
  }
}

meta {
  name: Request Skill Development Insight
  type: http
  seq: 2
}

post {
  url: {{base_url}}/v1/tasks/insights
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{access_token}}
}

body:json {
  {
    "user_id": "{{user_id}}",
    "entry_ids": [
      "550e8400-e29b-41d4-a716-446655440001",
      "550e8400-e29b-41d4-a716-446655440002",
      "550e8400-e29b-41d4-a716-446655440003",
      "550e8400-e29b-41d4-a716-446655440004"
    ],
    "insight_type": "skill_development",
    "context": {
      "focus_areas": ["golang", "system_design", "api_development", "testing"],
      "learning_goals": [
        "Improve Go concurrency patterns",
        "Master microservices architecture",
        "Enhance testing strategies"
      ],
      "current_skill_level": {
        "golang": "intermediate",
        "system_design": "beginner",
        "testing": "intermediate"
      },
      "time_investment": {
        "learning_hours_per_week": 10,
        "practice_hours_per_week": 15
      },
      "analysis_period": {
        "start": "2025-07-01",
        "end": "2025-07-31"
      }
    }
  }
}

tests {
  test("Status should be 202 (Accepted)", function() {
    expect(res.getStatus()).to.equal(202);
  });

  test("Should return task_id and message", function() {
    expect(res.getBody()).to.have.property('task_id');
    expect(res.getBody()).to.have.property('message');
  });

  test("Task ID should be a string", function() {
    expect(res.getBody().task_id).to.be.a('string');
  });

  test("Message should confirm task queued", function() {
    expect(res.getBody().message).to.include('queued successfully');
  });
}

script:post-response {
  if (res.getStatus() === 202) {
    bru.setVar("skill_task_id", res.getBody().task_id);
  }
}
